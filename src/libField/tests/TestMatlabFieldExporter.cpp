#include "gmock/gmock.h"

#include "TestMatlabFieldExporter.h"
#include <Field/MatlabFieldExporter.h>
#include <Graph/GridGraphBuilder.h>

#include <fstream>

void TestMatlabFieldExporter::SetUp( ) {};
void TestMatlabFieldExporter::TearDown( ) {};

/* **********************************************************************
 * *                                                                    *
 * * FieldData Constructor tests                                            *
 * *                                                                    *
 * **********************************************************************/

TEST_F(TestMatlabFieldExporter, ExportField) { 

    std::vector<Element> elements;

    elements.push_back( el_1_1_1 );
    elements.push_back( el_1_1_2 );
    elements.push_back( el_1_1_3 );
    elements.push_back( el_2_1_1 );
    elements.push_back( el_2_1_2 );
    elements.push_back( el_2_1_3 );
    elements.push_back( el_3_1_1 );
    elements.push_back( el_3_1_2 );
    elements.push_back( el_3_1_3 );

    GridGraphBuilder<void *> * gb = new GridGraphBuilder<void *>( 1.0f );
    Field field{ gb, elements };
    delete gb;

    std::ostringstream out(std::ios::out | std::ios::binary);

    MatlabFieldExporter fx{out};
    fx.exportField( field );

    const char *actual_value = out.str().c_str();

    const unsigned char expected_value[] = {
        0x4D, 0x41, 0x54, 0x4C, 0x41, 0x42, 0x20, 0x35, 
        0x2E, 0x30, 0x20, 0x4D, 0x41, 0x54, 0x2D, 0x66,
        0x69, 0x6C, 0x65, 0x2C, 0x20, 0x47, 0x65, 0x6E,
        0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
        0x79, 0x20, 0x41, 0x6E, 0x69, 0x6D, 0x65, 0x73,
        0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x49, 0x4D,
        0x0E, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x6C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 
        0x5F, 0x6D, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5F, 
        0x07, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x40,
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40,
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3F,
        0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x40, 0x40, 
        0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x40, 0x40, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x40, 
        0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 
        0x0E, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 
        0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
        0x6E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x5F, 0x6D, 
        0x61, 0x74, 0x72, 0x69, 0x78, 0x5F, 0x5F, 0x5F, 
        0x07, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0E, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 
        0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
        0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
        0x74, 0x61, 0x6E, 0x67, 0x65, 0x6E, 0x74, 0x5F, 
        0x6D, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5F, 0x5F, 
        0x07, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
        0xAB, 0x4E, 0xC3, 0x3D, 0x00, 0x00, 0x00, 0x00, 
        0x50, 0xD5, 0x7E, 0xBF, 0x59, 0xD1, 0x3D, 0x3F, 
        0x00, 0x00, 0x00, 0x80, 0x54, 0xC5, 0x2B, 0x3F, 
        0x29, 0xC7, 0x24, 0xBD, 0x00, 0x00, 0x00, 0x00, 
        0xF2, 0xCA, 0x7F, 0x3F, 0x8C, 0x41, 0x08, 0x3D, 
        0x00, 0x00, 0x00, 0x00, 0xBB, 0xDB, 0x7F, 0xBF, 
        0x7C, 0xEA, 0x62, 0xBF, 0x00, 0x00, 0x00, 0x00, 
        0x43, 0x06, 0xED, 0xBE, 0xEE, 0x4A, 0x86, 0x3E, 
        0x00, 0x00, 0x00, 0x00, 0x84, 0x09, 0x77, 0xBF, 
        0x7D, 0x72, 0x07, 0xBE, 0x00, 0x00, 0x00, 0x00, 
        0x29, 0xC0, 0x7D, 0xBF, 0x53, 0x34, 0x7F, 0x3F, 
        0x00, 0x00, 0x00, 0x00, 0x95, 0x56, 0xA1, 0xBD, 
        0x5A, 0x1F, 0x48, 0xBF, 0x00, 0x00, 0x00, 0x00, 
        0x7F, 0xA5, 0x1F, 0x3F, 0x00, 0x00, 0x00, 0x00,
    };
    uint32_t actual_value_size = sizeof(expected_value) / sizeof(expected_value[0]);

    EXPECT_THAT( std::vector<uint8_t>(actual_value, actual_value + actual_value_size), ::testing::ElementsAreArray(expected_value) );
}


